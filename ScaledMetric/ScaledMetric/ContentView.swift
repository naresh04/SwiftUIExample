//
//  ContentView.swift
//  ScaledMetric
//
//  Created by naresh chouhan on 3/19/25.
/*
 @ScaledMetric is a property wrapper in SwiftUI that automatically scales a numeric value based on the userâ€™s Dynamic Type settings (Text Size settings in iOS/macOS).
 
 
 ðŸ”¹ Why Use @ScaledMetric?

 âœ… Adapts to different accessibility text sizes
 âœ… Ensures UI elements scale consistently
 âœ… Improves readability for users with larger text settings
 âœ… Works well with frame sizes, padding, and custom fonts
 
 */

import SwiftUI

struct ContentView: View {
    @ScaledMetric var fontSize: CGFloat = 20
    @ScaledMetric var boxSize: CGFloat = 50
    @ScaledMetric(relativeTo: .largeTitle) var customSize: CGFloat = 40 // ðŸ‘ˆ Scales based on large title size

    var body: some View {
        VStack {
            Text("Hello, SwiftUI!")
                .font(.system(size: fontSize)) // ðŸ‘ˆ Uses the scaled value
                .padding(fontSize) // ðŸ‘ˆ Padding also scales
                        .border(Color.blue, width: 2)
            RoundedRectangle(cornerRadius: 10)
                       .frame(width: boxSize, height: boxSize) // ðŸ‘ˆ Scales with user settings
                       .foregroundColor(.green)
            
            Text("Scaling Example")
                        .font(.system(size: customSize))
        }
        .padding()
    }
}

#Preview {
    ContentView()
}
